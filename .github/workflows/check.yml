name: Check Vulnerability
on: [push, pull_request]
env:
  BUNDLE_CLEAN: 'true'
  BUNDLE_PATH: 'vendor/bundle'
  BUNDLER_VERSION: '1.17.3'
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6.5
      - name: Cache gems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: ${{ runner.os }}-gem-
      - name: bundle install
        run: |
          gem install bundler -v $BUNDLER_VERSION
          bundle install --jobs 4 --retry 3
      - name: setup db
        run: bundle exec rails db:setup
      - name: Vulnerability test 1-a
        run: bundle exec rails training SPEC=spec/vulnerabilities/sql_injection_spec.rb
      - name: Vulnerability test 1-b
        run: bundle exec rails training SPEC=spec/vulnerabilities/command_injection_spec.rb
      # - name: Vulnerability test 2
      #   run: bundle exec rails training SPEC=spec/vulnerabilities/broken_auth_spec.rb
      # - name: Vulnerability test 3
      #   run: bundle exec rails training SPEC=spec/vulnerabilities/xss_spec.rb
      # - name: Vulnerability test 4
      #   run: bundle exec rails training SPEC=spec/vulnerabilities/insecure_dor_spec.rb
      # - name: Vulnerability test 6-a
      #   run: bundle exec rails training SPEC=spec/vulnerabilities/password_hashing_spec.rb
      # - name: Vulnerability test 6-b
      #   run: bundle exec rails training SPEC=spec/vulnerabilities/sensitive_data_exposure.rb
      # - name: Vulnerability test 7
      #   run: bundle exec rails training SPEC=spec/vulnerabilities/url_access_spec.rb
      # - name: Vulnerability test 8
      #   run: bundle exec rails training SPEC=spec/vulnerabilities/csrf_spec.rb
      # - name: Vulnerability test 10
      #   run: bundle exec rails training SPEC=spec/vulnerabilities/unvalidated_redirects_spec.rb
